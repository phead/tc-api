{
  "name": "passport-topcoder",
  "description": "Passport strategy for Topcoder OAuth provider",
  "version": "0.0.1",
  "dependencies": {
    "passport-oauth": "0.1.x",
    "pkginfo": "0.2.x"
  },
  "devDependencies": {
    "mocha": "1.x.x",
    "chai": "1.x.x",
    "chai-passport-strategy": "0.1.x",
    "expect.js": "0.2.x"
  },
  "main": "./",
  "engines": {
    "node": ">= 0.4.0"
  },
  "author": {
    "name": "CloudSpokes and TopCoder Together"
  },
  "readme": "# passport-topcoder\n\n\nThis module lets you authenticate using Topcoder in your Node.js applications.\nBy plugging into Passport, Topcoder authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-topcoder\n\n## Usage\n\n#### Configure Strategy\n\nThe Topcoder authentication strategy authenticates users using a Topcoder account\nand OAuth tokens.  The strategy requires a `verify` callback function, which receives the\naccess token and corresponding refresh token as arguments, along with a `profile` which\ncontains the authenticated user's Topcoder profile.   The `verify` callback must\ncall `done` providing a user to complete authentication.\n\nIn order to identify your application to TopCoder, specify the client id,\nclient secret, and callback URL within `options`.\n\n    passport.use(new TopcoderStrategy({\n            clientID: MY_CLIENT_ID,\n            clientSecret: MY_CLIENT_SECRET,\n            callbackURL: MY_CALLBACK_URL\n        },\n        function(accessToken, refreshToken, params, profile, done) {\n            var tokenDTO = {\n                accessToken: accessToken,\n                expirationTime : params.expires_in,\n                scope : params.scope.split(\" \")\n            };\n        return done(null, tokenDTO);\n        }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'Topcoder'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/topcoder', passport.authenticate('Topcoder', {scope: [\"FORUMS_REST\", \"CONTEST_REST\"]}));\n    \n    app.get('/auth/topcoder/callback', function (req, res, next) {\n      passport.authenticate('Topcoder', function (err, token) {\n          if (req.query.error) {\n              res.render(\"login\", {error: req.query.error});\n          } else {\n              res.render(\"login\", {token: token});\n          }\n      })(req, res, next);\n  });\n\n## Examples\n\nFor a complete, working example, refer to the [signin example](https://github.com/cloudspokes/passport-topcoder/tree/master/examples/).\n\n## Tests\n\nComing...\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\n\n",
  "readmeFilename": "README.md",
  "_id": "passport-topcoder@0.0.1",
  "dist": {
    "shasum": "feb033db8eaf212e4585485c9c8910f8675adfa8"
  },
  "_from": "passport-topcoder@*",
  "_resolved": "https://registry.npmjs.org/passport-topcoder/-/passport-topcoder-0.0.1.tgz"
}
